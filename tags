!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
.DEFAULT_GOAL	Makefile	/^.DEFAULT_GOAL := all$/;"	m
.DEFAULT_GOAL	ana-prism/Makefile	/^.DEFAULT_GOAL := all$/;"	m
AC_KVEC_H	uthash.h	49;"	d
AVERAGE_MAX	mpitracer.cc	12;"	d	file:
AVERAGE_MAX	old_mpitracer.cc	12;"	d	file:
AVERAGE_MIN	mpitracer.cc	11;"	d	file:
AVERAGE_MIN	old_mpitracer.cc	11;"	d	file:
BUFFER_SIZE	mpitracer.h	31;"	d
Buffer	mpitracer.h	/^    } Buffer;$/;"	t	namespace:danzer	typeref:struct:danzer::__anon5
CFLAGS	Makefile	/^CFLAGS=-std=c++17 -O0 -g -fpermissive$/;"	m
CFLAGS	ana-prism/Makefile	/^CFLAGS=-std=c++17 -O3 -g$/;"	m
ChunkData	mpitracer.h	/^    ChunkData(){$/;"	f	class:danzer::ChunkData
ChunkData	mpitracer.h	/^  class ChunkData{$/;"	c	namespace:danzer
Dedupe	mpitracer.h	/^    Dedupe(int chunk_mode_from, int ch_size, int fp_mode, string outfile, int numWorkers, int load_balance){$/;"	f	class:danzer::Dedupe
Dedupe	mpitracer.h	/^  class Dedupe{$/;"	c	namespace:danzer
FASTCDC_CLAMP	mpitracer.cc	7;"	d	file:
FASTCDC_CLAMP	old_mpitracer.cc	7;"	d	file:
FASTCDC_DIVCEIL	mpitracer.cc	8;"	d	file:
FASTCDC_DIVCEIL	old_mpitracer.cc	8;"	d	file:
FASTCDC_MASK	mpitracer.cc	9;"	d	file:
FASTCDC_MASK	old_mpitracer.cc	9;"	d	file:
FP_MD5	mpitracer.h	/^     FP_MD5$/;"	e	enum:danzer::fingerprint_modes
FP_SHA1	mpitracer.h	/^     FP_SHA1,$/;"	e	enum:danzer::fingerprint_modes
FP_SHA256	mpitracer.h	/^     FP_SHA256,$/;"	e	enum:danzer::fingerprint_modes
FP_SHA512	mpitracer.h	/^     FP_SHA512,$/;"	e	enum:danzer::fingerprint_modes
FStat	mpitracer.h	/^    FStat () {$/;"	f	class:danzer::FStat
FStat	mpitracer.h	/^  class FStat$/;"	c	namespace:danzer
FULL_FILE	mpitracer.h	/^        FULL_FILE$/;"	e	enum:danzer::chunk_size
GEAR	mpitracer.cc	/^    static const uint32_t GEAR[] = {$/;"	m	namespace:danzer	file:
GEAR	old_mpitracer.cc	/^    static const uint32_t GEAR[] = {$/;"	m	namespace:danzer	file:
GetHexRepresentation	mpitracer.cc	/^    string Dedupe::GetHexRepresentation(const unsigned char *Bytes, size_t Length)$/;"	f	class:danzer::Dedupe
GetHexRepresentation	old_mpitracer.cc	/^    string Dedupe::GetHexRepresentation(const unsigned char *Bytes, size_t Length)$/;"	f	class:danzer::Dedupe
INCLUDES	Makefile	/^INCLUDES=-.\/include$/;"	m
INCLUDES	ana-prism/Makefile	/^INCLUDES=-.\/include$/;"	m
LIBS	Makefile	/^LIBS=-lrt -lm -lstdc++fs -lssl -lcrypto -llustreapi -lpthread$/;"	m
LIBS	ana-prism/Makefile	/^LIBS=-lrt -lm -lstdc++fs -lssl -lcrypto$/;"	m
MASTER	mpitracer.h	36;"	d
MAXIMUM_MAX	mpitracer.cc	16;"	d	file:
MAXIMUM_MAX	old_mpitracer.cc	16;"	d	file:
MAXIMUM_MIN	mpitracer.cc	15;"	d	file:
MAXIMUM_MIN	old_mpitracer.cc	15;"	d	file:
MAX_FILE_PATH_LEN	mpitracer.h	35;"	d
MINIMUM_MAX	mpitracer.cc	14;"	d	file:
MINIMUM_MAX	old_mpitracer.cc	14;"	d	file:
MINIMUM_MIN	mpitracer.cc	13;"	d	file:
MINIMUM_MIN	old_mpitracer.cc	13;"	d	file:
MPICXX	Makefile	/^MPICXX=mpicxx$/;"	m
Msg_Push	master.cc	/^void Dedupe::Msg_Push(char * buffer, char * Msg, int idx){$/;"	f	class:danzer::Dedupe
OST_NUMBER	mpitracer.h	33;"	d
OST_queue	mpitracer.h	/^    } OST_queue;$/;"	t	namespace:danzer	typeref:struct:danzer::__anon4
POOL_SIZE	mpitracer.h	32;"	d
QUEUE_SIZE	mpitracer.h	30;"	d
SZ_128K	mpitracer.h	/^        SZ_128K,$/;"	e	enum:danzer::chunk_size
SZ_16K	mpitracer.h	/^        SZ_16K,$/;"	e	enum:danzer::chunk_size
SZ_1MB	mpitracer.h	/^        SZ_1MB,$/;"	e	enum:danzer::chunk_size
SZ_256K	mpitracer.h	/^        SZ_256K,$/;"	e	enum:danzer::chunk_size
SZ_32K	mpitracer.h	/^        SZ_32K,$/;"	e	enum:danzer::chunk_size
SZ_4K	mpitracer.h	/^        SZ_4K,$/;"	e	enum:danzer::chunk_size
SZ_4MB	mpitracer.h	/^        SZ_4MB,$/;"	e	enum:danzer::chunk_size
SZ_512K	mpitracer.h	/^        SZ_512K,$/;"	e	enum:danzer::chunk_size
SZ_8K	mpitracer.h	/^        SZ_8K,$/;"	e	enum:danzer::chunk_size
TASK_QUEUE_FULL	mpitracer.h	34;"	d
TERMINATION_MSG	mpitracer.h	37;"	d
ThreadArgs	mpitracer.h	/^    } ThreadArgs;$/;"	t	namespace:danzer	typeref:struct:danzer::__anon6
av	mpitracer.h	/^    uint32_t av;$/;"	m	struct:danzer::__anon1
bufferpool	mpitracer.h	/^    Buffer bufferpool[POOL_SIZE];$/;"	m	class:danzer::Dedupe
cd	mpitracer.h	/^    ChunkData cd;$/;"	m	class:danzer::Dedupe
chunk	mpitracer.h	/^  }chunk;$/;"	t	namespace:danzer	typeref:struct:danzer::__anon2
chunk_block	mpitracer.h	/^    int chunk_block;$/;"	m	class:danzer::Dedupe
chunk_cdc	mpitracer.cc	/^    void Dedupe::chunk_cdc(string buffer, ofstream &trace_file)$/;"	f	class:danzer::Dedupe
chunk_cdc	mpitracer.cc	/^    void Dedupe::chunk_cdc(string buffer, ofstream &trace_file, chunk_vec *cv, uint64_t *kv_count)$/;"	f	class:danzer::Dedupe
chunk_cdc	old_mpitracer.cc	/^    void Dedupe::chunk_cdc(string buffer, ofstream &trace_file)$/;"	f	class:danzer::Dedupe
chunk_cdc	old_mpitracer.cc	/^    void Dedupe::chunk_cdc(string buffer, ofstream &trace_file, chunk_vec *cv, uint64_t *kv_count)$/;"	f	class:danzer::Dedupe
chunk_entry	mpitracer.h	/^  struct chunk_entry{$/;"	s	namespace:danzer
chunk_fixed_size	mpitracer.cc	/^    void Dedupe::chunk_fixed_size(const string &buffer, uint64_t obj_size){$/;"	f	class:danzer::Dedupe
chunk_fixed_size	old_mpitracer.cc	/^    void Dedupe::chunk_fixed_size(const string &buffer, int rank, uint64_t o_size){$/;"	f	class:danzer::Dedupe
chunk_full_file	mpitracer.cc	/^    void Dedupe::chunk_full_file(string file_name, ofstream &trace_file)$/;"	f	class:danzer::Dedupe
chunk_full_file	old_mpitracer.cc	/^    void Dedupe::chunk_full_file(string file_name, ofstream &trace_file)$/;"	f	class:danzer::Dedupe
chunk_mode	mpitracer.h	/^    int chunk_mode;$/;"	m	class:danzer::Dedupe
chunk_size	mpitracer.h	/^    int chunk_size;$/;"	m	class:danzer::Dedupe
chunk_size	mpitracer.h	/^  enum chunk_size{$/;"	g	namespace:danzer
chunk_vec	mpitracer.h	/^  typedef kvec_t(chunk) chunk_vec;$/;"	t	namespace:danzer
chunks	mpitracer.h	/^    vector<chunk_entry *> chunks;$/;"	m	class:danzer::ChunkData
commThread	mpitracer.cc	/^    void* Dedupe::commThread() {$/;"	f	class:danzer::Dedupe
commThread	old_mpitracer.cc	/^    void* Dedupe::commThread() {$/;"	f	class:danzer::Dedupe
commThreadStarter	mpitracer.cc	/^    void* Dedupe::commThreadStarter(void* arg) {$/;"	f	class:danzer::Dedupe
commThreadStarter	old_mpitracer.cc	/^    void* Dedupe::commThreadStarter(void* arg) {$/;"	f	class:danzer::Dedupe
cond	mpitracer.h	/^        pthread_cond_t cond;$/;"	m	struct:danzer::__anon4
cond	mpitracer.h	/^        pthread_cond_t cond;$/;"	m	struct:danzer::__anon5
cut	mpitracer.cc	/^    uint32_t cut(const uint8_t *src, const uint32_t len, const uint32_t mi, const uint32_t ma, const uint32_t ns, const uint32_t mask_s, const uint32_t mask_l)$/;"	f	namespace:danzer
cut	old_mpitracer.cc	/^    uint32_t cut(const uint8_t *src, const uint32_t len, const uint32_t mi, const uint32_t ma, const uint32_t ns, const uint32_t mask_s, const uint32_t mask_l)$/;"	f	namespace:danzer
danzer	master.cc	/^namespace danzer {$/;"	n	file:
danzer	mpitracer.cc	/^namespace danzer$/;"	n	file:
danzer	mpitracer.h	/^namespace danzer{$/;"	n
danzer	old_mpitracer.cc	/^namespace danzer$/;"	n	file:
data	mpitracer.h	/^        char data[BUFFER_SIZE];$/;"	m	struct:danzer::__anon5
dequeue	mpitracer.cc	/^    object_task Dedupe::dequeue(OST_queue *ost_q) {$/;"	f	class:danzer::Dedupe
dequeue	old_mpitracer.cc	/^    object_task Dedupe::dequeue(OST_queue *ost_q) {$/;"	f	class:danzer::Dedupe
end	mpitracer.h	/^        uint64_t end; \/\/ end offset$/;"	m	struct:danzer::__anon3
enqueue	mpitracer.cc	/^    void Dedupe::enqueue(OST_queue *ost_q, object_task task) {$/;"	f	class:danzer::Dedupe
enqueue	old_mpitracer.cc	/^    void Dedupe::enqueue(OST_queue *ost_q, object_task task) {$/;"	f	class:danzer::Dedupe
fastcdc_init	mpitracer.cc	/^    fcdc_ctx Dedupe::fastcdc_init(uint32_t mi, uint32_t av, uint32_t ma)$/;"	f	class:danzer::Dedupe
fastcdc_init	old_mpitracer.cc	/^    fcdc_ctx Dedupe::fastcdc_init(uint32_t mi, uint32_t av, uint32_t ma)$/;"	f	class:danzer::Dedupe
fastcdc_stream	mpitracer.cc	/^    size_t Dedupe::fastcdc_stream(FILE *stream, uint32_t mi, uint32_t av, uint32_t ma, chunk_vec *cv)$/;"	f	class:danzer::Dedupe
fastcdc_stream	old_mpitracer.cc	/^    size_t Dedupe::fastcdc_stream(FILE *stream, uint32_t mi, uint32_t av, uint32_t ma, chunk_vec *cv)$/;"	f	class:danzer::Dedupe
fastcdc_update	mpitracer.cc	/^    size_t Dedupe::fastcdc_update(fcdc_ctx *ctx, uint8_t *data, size_t len, int end, chunk_vec *cv)$/;"	f	class:danzer::Dedupe
fastcdc_update	old_mpitracer.cc	/^    size_t Dedupe::fastcdc_update(fcdc_ctx *ctx, uint8_t *data, size_t len, int end, chunk_vec *cv)$/;"	f	class:danzer::Dedupe
fcdc_ctx	mpitracer.h	/^  }fcdc_ctx;$/;"	t	namespace:danzer	typeref:struct:danzer::__anon1
fe_table	mpitracer.h	/^    unordered_map<string, long long> fe_table;$/;"	m	class:danzer::FStat
file_path	mpitracer.h	/^	char file_path[MAX_FILE_PATH_LEN]; $/;"	m	struct:danzer::__anon3
filled	mpitracer.h	/^        int filled;$/;"	m	struct:danzer::__anon5
fingerprint	mpitracer.h	/^     unsigned char fingerprint[SHA_DIGEST_LENGTH];$/;"	m	struct:danzer::chunk_entry
fingerprint_modes	mpitracer.h	/^  enum fingerprint_modes{$/;"	g	namespace:danzer
fp_mode	mpitracer.h	/^    int fp_mode;$/;"	m	class:danzer::Dedupe
fsize_table	mpitracer.h	/^    vector <pair <long long, string>> fsize_table;$/;"	m	class:danzer::FStat
index	mpitracer.h	/^        int index;$/;"	m	struct:danzer::__anon6
init	mpitracer.h	/^    void init(){$/;"	f	class:danzer::ChunkData
initializeq	mpitracer.cc	/^    void Dedupe::initializeq(int ostPerRank) {$/;"	f	class:danzer::Dedupe
initializeq	old_mpitracer.cc	/^    void Dedupe::initializeq(int ostPerRank) {$/;"	f	class:danzer::Dedupe
instance	mpitracer.h	/^        Dedupe* instance;$/;"	m	struct:danzer::__anon6
interval	mpitracer.h	/^        uint64_t interval;$/;"	m	struct:danzer::__anon3
kv_A	uthash.h	64;"	d
kv_a	uthash.h	96;"	d
kv_copy	uthash.h	72;"	d
kv_destroy	uthash.h	63;"	d
kv_init	uthash.h	62;"	d
kv_max	uthash.h	67;"	d
kv_pop	uthash.h	65;"	d
kv_push	uthash.h	80;"	d
kv_pushp	uthash.h	89;"	d
kv_resize	uthash.h	69;"	d
kv_roundup32	uthash.h	53;"	d
kv_size	uthash.h	66;"	d
kv_swap	uthash.h	103;"	d
kvec_t	uthash.h	57;"	d
layout_analysis	master.cc	/^void Dedupe::layout_analysis(filesystem::directory_entry entry, vector<vector<object_task*>> &task_queue){$/;"	f	class:danzer::Dedupe
layout_end_of_process	master.cc	/^void Dedupe::layout_end_of_process(vector<vector<object_task*>> &task_queue){$/;"	f	class:danzer::Dedupe
len	mpitracer.h	/^    size_t len;$/;"	m	struct:danzer::__anon2
load_balance	mpitracer.h	/^	int load_balance = 1; $/;"	m	class:danzer::Dedupe
ma	mpitracer.h	/^    uint32_t ma;$/;"	m	struct:danzer::__anon1
main	ana-prism/p_analyze.cc	/^int main(int argc, char *argv[])$/;"	f
main	mpitracer.cc	/^int main(int argc, char **argv)$/;"	f
main	old_mpitracer.cc	/^int main(int argc, char **argv)$/;"	f
mask_l	mpitracer.h	/^    uint32_t mask_l;$/;"	m	struct:danzer::__anon1
mask_s	mpitracer.h	/^    uint32_t mask_s;$/;"	m	struct:danzer::__anon1
mean_file_size	mpitracer.h	/^    long long mean_file_size;$/;"	m	class:danzer::FStat
measure_cumulative_fs	mpitracer.cc	/^    void FStat::measure_cumulative_fs(string directory_path, ofstream &output_file)$/;"	f	class:danzer::FStat
measure_cumulative_fs	old_mpitracer.cc	/^    void FStat::measure_cumulative_fs(string directory_path, ofstream &output_file)$/;"	f	class:danzer::FStat
measure_file_extensions	mpitracer.cc	/^    void FStat::measure_file_extensions(string directory_path, ofstream &output_file)$/;"	f	class:danzer::FStat
measure_file_extensions	old_mpitracer.cc	/^    void FStat::measure_file_extensions(string directory_path, ofstream &output_file)$/;"	f	class:danzer::FStat
measure_file_sizes	mpitracer.cc	/^    void FStat::measure_file_sizes(string directory_path, ofstream &output_file)$/;"	f	class:danzer::FStat
measure_file_sizes	old_mpitracer.cc	/^    void FStat::measure_file_sizes(string directory_path, ofstream &output_file)$/;"	f	class:danzer::FStat
mi	mpitracer.h	/^    uint32_t mi;$/;"	m	struct:danzer::__anon1
mode	mpitracer.h	/^    int mode;$/;"	m	class:danzer::ChunkData
mutex	mpitracer.h	/^        pthread_mutex_t mutex;$/;"	m	struct:danzer::__anon4
mutex	mpitracer.h	/^        pthread_mutex_t mutex;$/;"	m	struct:danzer::__anon5
non_default_pfl	mpitracer.h	/^    int non_default_pfl=0; $/;"	m	class:danzer::Dedupe
normal_size	mpitracer.cc	/^    uint32_t normal_size(const uint32_t mi, const uint32_t av, const uint32_t len)$/;"	f	namespace:danzer
normal_size	old_mpitracer.cc	/^    uint32_t normal_size(const uint32_t mi, const uint32_t av, const uint32_t len)$/;"	f	namespace:danzer
ns	mpitracer.h	/^    uint32_t ns;$/;"	m	struct:danzer::__anon1
numWorkers	mpitracer.h	/^    int numWorkers = 1;$/;"	m	class:danzer::Dedupe
obj_cnt	mpitracer.h	/^    int obj_cnt = 0;$/;"	m	class:danzer::Dedupe
object_task	mpitracer.h	/^    } object_task;$/;"	t	namespace:danzer	typeref:struct:danzer::__anon3
object_task_buffer_free	master.cc	/^void Dedupe::object_task_buffer_free (char * buffer){$/;"	f	class:danzer::Dedupe
object_task_deserialization	master.cc	/^object_task * Dedupe::object_task_deserialization(const char* buffer){$/;"	f	class:danzer::Dedupe
object_task_generate	master.cc	/^object_task* Dedupe::object_task_generate(const char * file_path, int ost, uint64_t start, uint64_t end, uint64_t interval, uint64_t size){$/;"	f	class:danzer::Dedupe
object_task_insert	master.cc	/^void Dedupe::object_task_insert(object_task* task, vector<object_task*> queue){$/;"	f	class:danzer::Dedupe
object_task_load_balance	master.cc	/^void * Dedupe:: object_task_load_balance(vector<vector<object_task*>>& task_queue)$/;"	f	class:danzer::Dedupe
object_task_queue_clear	master.cc	/^char * Dedupe::object_task_queue_clear(vector<object_task*> &task_queue, int *task_num){$/;"	f	class:danzer::Dedupe
object_task_serialization	master.cc	/^void Dedupe:: object_task_serialization(object_task* task, char * buffer)$/;"	f	class:danzer::Dedupe
object_tasks_decomposition	mpitracer.cc	/^    void Dedupe::object_tasks_decomposition(const char* Msg, int cnt){$/;"	f	class:danzer::Dedupe
object_tasks_decomposition	old_mpitracer.cc	/^    void Dedupe::object_tasks_decomposition(const char* Msg, int cnt){$/;"	f	class:danzer::Dedupe
offset	mpitracer.h	/^    size_t offset;$/;"	m	struct:danzer::__anon2
ost	mpitracer.h	/^        int ost; \/\/ ost index$/;"	m	struct:danzer::__anon3
ostPerRank	mpitracer.h	/^    int ostPerRank = 0;$/;"	m	class:danzer::Dedupe
ost_cnt	mpitracer.h	/^    int ost_cnt = 0;$/;"	m	class:danzer::Dedupe
ost_map	mpitracer.h	/^    unordered_map<int, int> ost_map;$/;"	m	class:danzer::Dedupe
ost_q	mpitracer.h	/^    vector<OST_queue> ost_q;$/;"	m	class:danzer::Dedupe
output	Makefile	/^output = danzer_obj$/;"	m
output	ana-prism/Makefile	/^output = ana_prism$/;"	m
output_file	mpitracer.h	/^    string output_file;$/;"	m	class:danzer::Dedupe
pos	mpitracer.h	/^    size_t pos;$/;"	m	struct:danzer::__anon1
rank	mpitracer.h	/^    int rank = 0;$/;"	m	class:danzer::Dedupe
readFile	mpitracer.cc	/^    string Dedupe::readFile(const string &fileName)$/;"	f	class:danzer::Dedupe
readFile	old_mpitracer.cc	/^    string Dedupe::readFile(const string &fileName)$/;"	f	class:danzer::Dedupe
readerThread	mpitracer.cc	/^        void* Dedupe::readerThread() {$/;"	f	class:danzer::Dedupe
readerThread	old_mpitracer.cc	/^        void* Dedupe::readerThread() {$/;"	f	class:danzer::Dedupe
readerThreadStarter	mpitracer.cc	/^    void* Dedupe::readerThreadStarter(void* arg) {$/;"	f	class:danzer::Dedupe
readerThreadStarter	old_mpitracer.cc	/^    void* Dedupe::readerThreadStarter(void* arg) {$/;"	f	class:danzer::Dedupe
reader_idx	mpitracer.h	/^    atomic<int> reader_idx=0; \/\/worker_idx=0;$/;"	m	class:danzer::Dedupe
size	mpitracer.h	/^        uint64_t size; $/;"	m	struct:danzer::__anon3
size	mpitracer.h	/^        uint64_t size;$/;"	m	struct:danzer::__anon5
size_per_ost	mpitracer.h	/^	uint64_t size_per_ost[OST_NUMBER] = {0};$/;"	m	class:danzer::Dedupe
size_per_rank	mpitracer.h	/^	uint64_t *size_per_rank;$/;"	m	class:danzer::Dedupe
start	mpitracer.h	/^        uint64_t start; \/\/ start offset$/;"	m	struct:danzer::__anon3
start_pos	mpitracer.h	/^     uint64_t start_pos;$/;"	m	struct:danzer::chunk_entry
taskQueue	mpitracer.h	/^        queue<object_task> taskQueue;$/;"	m	struct:danzer::__anon4
task_cnt	mpitracer.h	/^	uint64_t task_cnt = 0;$/;"	m	class:danzer::Dedupe
task_cnt_per_rank	mpitracer.h	/^	uint64_t task_cnt_per_rank = 0; $/;"	m	class:danzer::Dedupe
tasks_per_ost	mpitracer.h	/^	vector <object_task> tasks_per_ost [OST_NUMBER];$/;"	m	class:danzer::Dedupe
total_file	mpitracer.h	/^    int total_file = 0; $/;"	m	class:danzer::Dedupe
total_file_count	mpitracer.h	/^    long long total_file_count;$/;"	m	class:danzer::FStat
total_file_size	mpitracer.h	/^    long long total_file_size;$/;"	m	class:danzer::FStat
total_file_size	mpitracer.h	/^    uint64_t total_file_size = 0; $/;"	m	class:danzer::Dedupe
traverse_directory	mpitracer.cc	/^    int Dedupe::traverse_directory(string directory_path){$/;"	f	class:danzer::Dedupe
traverse_directory	old_mpitracer.cc	/^    int Dedupe::traverse_directory(string directory_path){$/;"	f	class:danzer::Dedupe
workerThread	mpitracer.cc	/^    void* Dedupe::workerThread(int w_idx) {$/;"	f	class:danzer::Dedupe
workerThread	old_mpitracer.cc	/^    void* Dedupe::workerThread() {$/;"	f	class:danzer::Dedupe
workerThreadStarter	mpitracer.cc	/^     void* Dedupe::workerThreadStarter(void* arg) {$/;"	f	class:danzer::Dedupe
workerThreadStarter	old_mpitracer.cc	/^    void* Dedupe::workerThreadStarter(void* arg) {$/;"	f	class:danzer::Dedupe
worldSize	mpitracer.h	/^    int worldSize;$/;"	m	class:danzer::Dedupe
~ChunkData	mpitracer.h	/^    ~ChunkData(){$/;"	f	class:danzer::ChunkData
